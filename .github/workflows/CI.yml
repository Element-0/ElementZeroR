# This is a basic workflow to help you get started with Actions

name: CI

env:
  bds_version: 1.16.201.02
  nim_version: 1.4.2

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [build]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout snapshot
        uses: actions/checkout@v2
        with:
          repository: Element-0/snapshot
          path: snapshot
          submodules: recursive
          token: ${{ secrets.PUSH_SNAPSHOT_TOKEN }}
      - name: Setup git user
        run: |
          Push-Location snapshot
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@users.noreply.github.com"
          Pop-Location
      - name: Write version info
        run: |
          Push-Location snapshot
          [pscustomobject]@{
            bedrock_server = "${{ env.bds_version }}"
            nim = "${{ env.nim_version }}"
          } | ConvertTo-Json | Out-File -Encoding utf8 version
          Pop-Location
      - name: Fetch latest version
        id: fetch-snapshot
        run: |
          Push-Location snapshot
          Write-Output "::group::Pull from github"
          git pull --recurse-submodules --jobs=10
          Write-Output "::endgroup::"
          $ChangedFiles = git status --porcelain | measure | select -expand Count
          if ($ChangedFiles -gt 0) {
            Write-Output "::group::Create commit"
            $CurrentDateTime = Get-Date -Format o -AsUTC
            git diff
            git add .
            git commit -m "Snapshot from $CurrentDateTime"
            echo "::set-output name=updated::true"
            Write-Output "::endgroup::"
          }
          $hash = git log -1 --pretty=format:%h
          echo "::set-output name=hash::$hash"
          Pop-Location
      - name: Download rcedit.exe
        uses: robinraju/release-downloader@v1
        with:
          repository: electron/rcedit
          latest: true
          fileName: rcedit-x64.exe
          out-file-path: ${{ runner.tool_cache }}/rcedit
      - name: Setup rcedit
        run: |
          Rename-Item ${{ runner.tool_cache }}\rcedit\rcedit-x64.exe ${{ runner.tool_cache }}\rcedit\rcedit.exe
          Write-Output "${{ runner.tool_cache }}\rcedit" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
      - name: Install nim
        uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.nim_version }}
      - name: Refresh package repo
        run: nimble.exe refresh
      - name: Cache nimble
        uses: actions/cache@v2
        id: nimble-cache
        with:
          path: |
            ~/.nimble
            !~/.nimble/pkgs/ezchakra-*
          key: nimble-${{ steps.fetch-snapshot.outputs.hash }}-${{ hashFiles('~/.nimble/*.json') }}
      - name: Install dependencies
        if: steps.nimble-cache.outputs.cache-hit != 'true'
        run: |
          Push-Location snapshot
          $Folders = .\Get-InstallOrder.ps1
          foreach ($Folder in $Folders) {
            Write-Output "::group::Install $Folder"
            Push-Location $Folder
            & nimble.exe install --cc:vcc
            Pop-Location
            Write-Output "::endgroup::"
          }
          Write-Output "::group::Install ezmgr"
          Push-Location packages\ezmgr
          & nimble.exe install --cc:vcc --passC:-MD --debuginfo:on --passC:-MD --passC:-GL --opt:speed
          Pop-Location
          Write-Output "::endgroup::"
      - name: Build and install chakra.dll
        run: |
          Push-Location snapshot\packages\chakra
          nimble.exe install -y
          Pop-Location
      - name: Cache BDS
        uses: actions/cache@v2
        id: bds-cache
        with:
          path: base
          key: bds-${{ env.bds_version }}
      - name: Download BDS
        if: steps.bds-cache.outputs.cache-hit != 'true'
        run: |
          $tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'tmp$', 'zip' } â€“PassThru
          $url = "https://minecraft.azureedge.net/bin-win/bedrock-server-${{ env.bds_version }}.zip"
          Invoke-WebRequest -OutFile $tmp $url
          $tmp | Expand-Archive -DestinationPath base
      - name: Generate Symbol Database
        run: |
          Push-Location base
          Write-Output "::group::Creating minimal db"
          ezpdbparser.cmd bedrock_server.pdb --database:bedrock_server.db
          Write-Output "::group::Creating full db"
          ezpdbparser.cmd bedrock_server.pdb --database:bedrock_server_full.db --full
          Write-Output "::endgroup::"
          Pop-Location
      - name: Create dist
        run: |
          function Copy-Item-Display($src, $dst) {
            Write-Output "::group::copy $src $dst"
            Copy-Item $src $dst
            Write-Output "::endgroup::"
          }
          function Get-Nimble-Path($name) {
            (nimble.exe path $name).trim()
          }
          function Copy-Nimble-Artifact($name) {
            Get-Nimble-Path $name |
              Get-ChildItem |
              Where-Object { $_.Extension -in '.dll', '.pdb', '.exe' } |
              Foreach-Object { Copy-Item-Display $_ (Join-Path "dist\" $_.Name) }
          }
          New-Item -Name "dist" -ItemType "directory" | OUt-Null
          Copy-Item-Display base\bedrock_server.db dist\bedrock_server.db
          Copy-Nimble-Artifact ezchakra
          Copy-Nimble-Artifact ezmgr
      - name: Upload dist
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ steps.fetch-snapshot.outputs.hash }}
          path: dist/
      - name: Upload full databse
        uses: actions/upload-artifact@v2
        with:
          name: full
          path: base/bedrock_server_full.db
      - name: Update snapshot
        if: success() && steps.fetch-snapshot.outputs.updated
        run: |
          Push-Location snapshot
          git push
          Pop-Location
