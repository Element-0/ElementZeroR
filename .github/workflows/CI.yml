# This is a basic workflow to help you get started with Actions

name: CI

env:
  bds_version: 1.16.201.02
  nim_version: 1.4.2

on:
  repository_dispatch:
    types: [build]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
        with:
          path: main
      - name: Checkout chakra
        uses: actions/checkout@v2
        with:
          repository: Element-0/chakra
          path: chakra
      - name: Download rcedit.exe
        uses: robinraju/release-downloader@v1
        with:
          repository: electron/rcedit
          latest: true
          fileName: rcedit-x64.exe
          out-file-path: ${{ runner.tool_cache }}/rcedit
      - name: Setup rcedit
        run: |
          Rename-Item ${{ runner.tool_cache }}\rcedit\rcedit-x64.exe ${{ runner.tool_cache }}\rcedit\rcedit.exe
          Write-Output "${{ runner.tool_cache }}\rcedit" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
      - name: Install nim
        uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.nim_version }}
      - name: Setup package source
        run: |
          $ini = New-Item -Path (Join-Path $env:APPDATA "nimble\nimble.ini") -Force
          $json = Resolve-Path main\packages.json
          Write-Output "[PackageList]" 'name = "ElementZero"' "path = r`"$json`"" | Out-File -FilePath $ini -Encoding utf8 -Append
          Write-Output "::group::Refresh nimble database"
          nimble.exe refresh
          Write-Output "::endgroup::"
      - name: Install dependencies
        run: |
          Write-Output "::group::Install dependencies"
          Push-Location chakra
          nimble.exe install -d
          Pop-Location
          Write-Output "::endgroup::"
      - name: Build chakra.dll
        run: |
          Push-Location chakra
          nimble.exe build_dll
          Pop-Location
      - name: Cache BDS
        uses: actions/cache@v2
        id: bds_cache
        with:
          path: base
          key: bds-${{ env.bds_version }}
      - name: Download BDS
        if: steps.bds_cache.outputs.cache-hit != 'true'
        run: |
          $tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'tmp$', 'zip' } â€“PassThru
          $url = "https://minecraft.azureedge.net/bin-win/bedrock-server-${{ env.bds_version }}.zip"
          Invoke-WebRequest -OutFile $tmp $url
          $tmp | Expand-Archive -DestinationPath base
      - name: Generate Symbol Database
        run: |
          Push-Location base
          ezpdbparser.cmd bedrock_server.pdb --database:bedrock_server.db
          Pop-Location
      - name: Create dist
        run: |
          function Copy-Item-Display($src, $dst) {
            Write-Output "::group::copy $src $dst"
            Copy-Item $src $dst
            Write-Output "::endgroup::"
          }
          New-Item -Name "dist" -ItemType "directory"
          Copy-Item-Display base\bedrock_server.db dist\bedrock_server.db
          $path_chakra = nimble.exe path ezchakra
          Get-ChildItem $path_chakra |
            Where-Object { $_.Extension -in '.dll', '.pdb' } |
            Foreach-Object { Copy-Item-Display $_ (Join-Path "dist\" $_.Name) }
      - name: Upload dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/